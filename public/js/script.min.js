"use strict";document.addEventListener("DOMContentLoaded",(async function(){document.querySelectorAll(".slider").forEach((e=>{const t=e.querySelector(".slider__wrapper"),n={observer:!0,resizeObserver:!0,speed:1500,spaceBetween:20,slidesPerView:"auto",mousewheel:!0,freeMode:{enabled:!0,momentum:!0,momentumRatio:1,sticky:!0},pagination:{el:".slider__pagination",type:"bullets",clickable:!0,dynamicBullets:!0}};e.classList.contains("day-forecast__wrapper")&&(n.direction=window.document.documentElement.clientWidth>824?"vertical":"horizontal");new Swiper(t,n)}))}));
"use strict";const DEFAULT_LOCATION="55.7558,37.6176",API_ENDPOINTS={ip:"https://api.ipify.org?format=json",ipLocation:"ajax/ipLocation.php",weather:"ajax/weather.php"},loadingBlocks=document.querySelectorAll(".section"),currentWeatherContainer=document.querySelector(".current-weather__content"),dayWeatherContainer=document.querySelector(".day-forecast__list"),nextWeatherContainer=document.querySelector(".next-forecast__list"),translations={en:{now:"At present:",temperature:"°C",windSpeed:"m/s",humidity:"%",pressure:"mmHg",morning:"Morning:",afternoon:"Afternoon:",evening:"Evening:",windDirections:["N","NE","E","SE","S","SW","W","NW"]},ru:{now:"Сейчас:",temperature:"°C",windSpeed:"м/с",humidity:"%",pressure:"мм рт. ст.",morning:"Утром:",afternoon:"Днем:",evening:"Вечером:",windDirections:["С","СВ","В","ЮВ","Ю","ЮЗ","З","СЗ"]}};let nowTitle="",temperatureUnit="",windSpeedUnit="",humidityUnit="",pressureUnit="",morningLabel="",afternoonLabel="",eveningLabel="",windDirections=[];async function fetchWeather(e,t){clearContent(),loadingBlocks.forEach((e=>{e.classList.add("loading")}));try{const n=await fetch(`${API_ENDPOINTS.weather}?latitude=${e}&longitude=${t}`),r=await n.json();r.success?(loadingBlocks.forEach((e=>{e.classList.remove("loading")})),showWeatherData(r.data)):console.error("Ошибка:",r.message)}catch(e){console.error("Ошибка при получении данных о погоде:",e)}}async function getIpLocation(){try{const e=await fetch(API_ENDPOINTS.ip),t=(await e.json()).ip,n=await fetch(`${API_ENDPOINTS.ipLocation}${t?`?currentIp=${t}`:""}`),r=await n.json();return r.success?`${r.data.latitude.toFixed(4)},${r.data.longitude.toFixed(4)}`:(console.error("Ошибка при получении IP-локации:",r.message),null)}catch(e){return console.error("Ошибка при получении IP-локации:",e),null}}async function getGeoLocation(){return navigator.geolocation?new Promise(((e,t)=>{navigator.geolocation.getCurrentPosition((n=>{fetchWeather(n.coords.latitude.toFixed(4),n.coords.longitude.toFixed(4)).then(e).catch(t)}),(e=>{console.error("Ошибка при получении геолокации:",e),alert("Не удалось получить ваше местоположение."),t(e)}))})):(alert("Геолокация не поддерживается вашим браузером."),Promise.reject(new Error("Геолокация не поддерживается")))}function changeLangValues(){const e=document.documentElement.lang||"ru";translations[e]&&(nowTitle=translations[e].now,temperatureUnit=translations[e].temperature,windSpeedUnit=translations[e].windSpeed,humidityUnit=translations[e].humidity,pressureUnit=translations[e].pressure,morningLabel=translations[e].morning,afternoonLabel=translations[e].afternoon,eveningLabel=translations[e].evening,windDirections=translations[e].windDirections)}function clearContent(){currentWeatherContainer.innerHTML="",dayWeatherContainer.innerHTML="",nextWeatherContainer.innerHTML=""}function showWeatherData(e){showCurrentData(e),showForecastDayData(e),showForecastNextData(e);document.querySelector(".current-weather__location").addEventListener("click",(async()=>{try{await getGeoLocation()}catch(e){console.error("Ошибка при получении геолокации:",e)}})),loadingBlocks.forEach((e=>{e.classList.remove("loading")}))}function showCurrentData(e){const t=document.querySelector(".current-weather__content"),n=`${e.address.road}, ${e.address.city||e.address.town}, ${e.address.country}`,r=(new Date).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit",hour12:!1}),a=e.weather.current,i=a.wind_direction.toFixed(0),o=degreesToWindDirection(i),s="current-weather";t.innerHTML=`\n    <button class="current-weather__location" type="button">\n      <svg class="current-weather__location-icon" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">\n          <use xlink:href="/public/img/sprite.svg#icon-compass"/>\n      </svg>\n      <p class="current-weather__location-address">${n}</p>\n    </button>\n    <p class="current-weather__time">${nowTitle} ${r}</p>\n      <svg class="current-weather__icon" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">\n        <use xlink:href="/public/img/sprite.svg#${a.icon}"/>\n      </svg>\n    <div class="current-weather__detail">\n      ${createWeatherDetail(a.air_temperature,"temperature",s,`${temperatureUnit}`)}\n      ${createWeatherDetail(a.wind_speed,"wind-speed",s,`${windSpeedUnit}`)}\n      ${createWeatherDetail(o,"wind-direction",s,"",""+(parseFloat(i)+180))}\n      ${createWeatherDetail(a.humidity,"humidity",s,`${humidityUnit}`)}\n      ${createWeatherDetail(a.air_pressure,"pressure",s,`${pressureUnit}`)}\n    </div>`}function showForecastDayData(e){const t=document.querySelector(".day-forecast__list");e.weather.day.forEach((e=>{t.appendChild(createForecastElement(e,"day-forecast"))}))}function showForecastNextData(e){const t=document.querySelector(".next-forecast__list");e.weather.next.forEach((e=>{t.appendChild(createForecastElement(e,"next-forecast"))}))}function createWeatherDetail(e,t,n,r,a=""){return`\n    <div class="${n}__detail-item">\n      <svg class="${n}__detail-icon" ${a?`style="transform:rotate(${a}deg)"`:""} viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">\n        <use xlink:href="/public/img/sprite.svg#${"current-weather"!==n?`${t}-static`:t}"/>\n      </svg>\n      <span class="${n}__detail-value">${e}</span>\n      ${r?`<span class="${n}__detail-units">${r}</span>`:""}\n    </div>`}function createForecastElement(e,t){const n=e.wind_direction.toFixed(0),r=degreesToWindDirection(n),a=document.createElement("li");return a.classList.add(`${t}__item`,"swiper-slide"),a.innerHTML=`\n    <p class="${t}${e.time?"__time":"__date"}">${e.time||e.date}</p>\n    <svg class="${t}__icon" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">\n      <use xlink:href="/public/img/sprite.svg#${e.icon}"/>\n    </svg>\n    <div class="${t}__detail">\n      ${"object"==typeof e.air_temperature&&null!==e.air_temperature?createTimeSpecificDetails(e.air_temperature,"temperature",t,`${temperatureUnit}`):createWeatherDetail(e.air_temperature,"temperature",t,`${temperatureUnit}`)}\n      ${createWeatherDetail(e.wind_speed,"wind-speed",t,`${windSpeedUnit}`)}\n      ${createWeatherDetail(r,"wind-direction",t,"",""+(parseFloat(n)+180))}\n      ${createWeatherDetail(e.humidity,"humidity",t,`${humidityUnit}`)}\n      ${createWeatherDetail(e.air_pressure,"pressure",t,`${pressureUnit}`)}\n    </div>`,a}function createTimeSpecificDetails(e,t,n,r){const a={"06":`${morningLabel}`,12:`${afternoonLabel}`,18:`${eveningLabel}`};return["06","12","18"].map((t=>{const i=a[t],o=void 0!==e[t]?e[t]:"N/A";return`\n      <div class="${n}__detail-item">\n        <span class="${n}__detail-time">${i}</span>\n        <span class="${n}__detail-value">${o}</span>\n        ${r?`<span class="${n}__detail-units">${r}</span>`:""}\n      </div>`})).join("")}function degreesToWindDirection(e){const t=Math.round(e/45)%8;return windDirections[t]}document.addEventListener("DOMContentLoaded",(async()=>{try{changeLangValues();const e=await getIpLocation()||DEFAULT_LOCATION,[t,n]=e.split(",");await fetchWeather(t,n),await getGeoLocation()}catch(e){console.error("Ошибка при инициализации:",e)}}));
//# sourceMappingURL=script.min.js.map
