{"version":3,"sources":["sliders.js","weather.js"],"names":["document","addEventListener","async","querySelectorAll","forEach","slider","container","querySelector","defaultOptions","observer","resizeObserver","speed","spaceBetween","slidesPerView","mousewheel","freeMode","enabled","momentum","momentumRatio","sticky","pagination","el","type","clickable","dynamicBullets","classList","contains","direction","window","documentElement","clientWidth","Swiper","DEFAULT_LOCATION","API_ENDPOINTS","ip","ipLocation","weather","loadingBlocks","currentWeatherContainer","dayWeatherContainer","nextWeatherContainer","translations","en","now","temperature","windSpeed","humidity","pressure","morning","afternoon","evening","windDirections","ru","nowTitle","temperatureUnit","windSpeedUnit","humidityUnit","pressureUnit","morningLabel","afternoonLabel","eveningLabel","fetchWeather","latitude","longitude","clearContent","item","add","response","fetch","responseData","json","success","remove","showWeatherData","data","console","error","message","getIpLocation","responseIp","currentIp","toFixed","getGeoLocation","navigator","geolocation","Promise","resolve","reject","getCurrentPosition","position","coords","then","catch","alert","Error","changeLangValues","lang","innerHTML","showCurrentData","showForecastDayData","showForecastNextData","weatherContainer","address","road","city","town","country","time","Date","toLocaleTimeString","hour","minute","hour12","currentWeather","current","degrees","wind_direction","windDirection","degreesToWindDirection","prefix","icon","createWeatherDetail","air_temperature","wind_speed","parseFloat","air_pressure","day","appendChild","createForecastElement","next","value","units","element","createElement","date","createTimeSpecificDetails","temperatures","timeLabels","map","label","undefined","join","index","Math","round","location","split"],"mappings":"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","file":"script.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', async function () {\n  const sliders = document.querySelectorAll('.slider');\n\n  sliders.forEach((slider) => {\n    const container = slider.querySelector('.slider__wrapper');\n\n    const defaultOptions = {\n      observer: true,\n      resizeObserver: true,\n      speed: 1500,\n      spaceBetween: 20,\n      slidesPerView: 'auto',\n      mousewheel: true,\n      freeMode: {\n        enabled: true,\n        momentum: true,\n        momentumRatio: 1,\n        sticky: true,\n      },\n      pagination: {\n        el: '.slider__pagination',\n        type: 'bullets',\n        clickable: true,\n        dynamicBullets: true,\n      },\n    };\n\n    if (slider.classList.contains('day-forecast__wrapper')) {\n      defaultOptions.direction = window.document.documentElement.clientWidth > 824 ? 'vertical' : 'horizontal';\n    }\n\n    const swiper = new Swiper(container, defaultOptions);\n  });\n});\n","const DEFAULT_LOCATION = '55.7558,37.6176';\nconst API_ENDPOINTS = {\n  ip: 'https://api.ipify.org?format=json',\n  ipLocation: 'ajax/ipLocation.php',\n  weather: 'ajax/weather.php'\n};\nconst loadingBlocks = document.querySelectorAll('.section');\nconst currentWeatherContainer = document.querySelector('.current-weather__content');\nconst dayWeatherContainer = document.querySelector('.day-forecast__list');\nconst nextWeatherContainer = document.querySelector('.next-forecast__list');\nconst translations = {\n  en: {\n    now: 'At present:',\n    temperature: '°C',\n    windSpeed: 'm/s',\n    humidity: '%',\n    pressure: 'mmHg',\n    morning: 'Morning:',\n    afternoon: 'Afternoon:',\n    evening: 'Evening:',\n    windDirections: ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']\n  },\n  ru: {\n    now: 'Сейчас:',\n    temperature: '°C',\n    windSpeed: 'м/с',\n    humidity: '%',\n    pressure: 'мм рт. ст.',\n    morning: 'Утром:',\n    afternoon: 'Днем:',\n    evening: 'Вечером:',\n    windDirections: ['С', 'СВ', 'В', 'ЮВ', 'Ю', 'ЮЗ', 'З', 'СЗ']\n  }\n};\nlet nowTitle = '';\nlet temperatureUnit = '';\nlet windSpeedUnit = '';\nlet humidityUnit = '';\nlet pressureUnit = '';\nlet morningLabel = '';\nlet afternoonLabel = '';\nlet eveningLabel = '';\nlet windDirections = [];\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  try {\n    changeLangValues();\n\n    const location = await getIpLocation() || DEFAULT_LOCATION;\n    const [latitude, longitude] = location.split(',');\n\n    await fetchWeather(latitude, longitude);\n    await getGeoLocation();\n  }\n  catch (error) {\n    console.error('Ошибка при инициализации:', error);\n  }\n});\n\nasync function fetchWeather(latitude, longitude) {\n  clearContent();\n\n  loadingBlocks.forEach((item) => {\n    item.classList.add('loading');\n  })\n\n  try {\n    const response = await fetch(`${API_ENDPOINTS.weather}?latitude=${latitude}&longitude=${longitude}`);\n    const responseData = await response.json();\n    if (responseData.success) {\n      loadingBlocks.forEach((item) => {\n        item.classList.remove('loading');\n      })\n\n      showWeatherData(responseData.data);\n    } else {\n      console.error('Ошибка:', responseData.message);\n    }\n  }\n  catch (error) {\n    console.error('Ошибка при получении данных о погоде:', error);\n  }\n}\n\nasync function getIpLocation() {\n  try {\n    const responseIp = await fetch(API_ENDPOINTS.ip);\n    const responseIpData = await responseIp.json();\n    const currentIp = responseIpData.ip;\n\n    const response = await fetch(`${API_ENDPOINTS.ipLocation}${currentIp ? `?currentIp=${currentIp}` : ''}`);\n    const responseData = await response.json();\n\n    if (responseData.success) {\n      return `${responseData.data.latitude.toFixed(4)},${responseData.data.longitude.toFixed(4)}`;\n    } else {\n      console.error('Ошибка при получении IP-локации:', responseData.message);\n      return null;\n    }\n  }\n  catch (error) {\n    console.error('Ошибка при получении IP-локации:', error);\n    return null;\n  }\n}\n\nasync function getGeoLocation() {\n  if (navigator.geolocation) {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(position => {\n        const latitude = position.coords.latitude.toFixed(4);\n        const longitude = position.coords.longitude.toFixed(4);\n        fetchWeather(latitude, longitude).then(resolve).catch(reject);\n      }, error => {\n        console.error('Ошибка при получении геолокации:', error);\n        alert('Не удалось получить ваше местоположение.');\n        reject(error);\n      });\n    });\n  } else {\n    alert('Геолокация не поддерживается вашим браузером.');\n    return Promise.reject(new Error('Геолокация не поддерживается'));\n  }\n}\n\nfunction changeLangValues() {\n  const lang = document.documentElement.lang || 'ru';\n\n  if (translations[lang]) {\n    nowTitle = translations[lang].now;\n    temperatureUnit = translations[lang].temperature;\n    windSpeedUnit = translations[lang].windSpeed;\n    humidityUnit = translations[lang].humidity;\n    pressureUnit = translations[lang].pressure;\n    morningLabel = translations[lang].morning;\n    afternoonLabel = translations[lang].afternoon;\n    eveningLabel = translations[lang].evening;\n    windDirections = translations[lang].windDirections;\n  }\n}\n\nfunction clearContent() {\n  currentWeatherContainer.innerHTML = '';\n  dayWeatherContainer.innerHTML = '';\n  nextWeatherContainer.innerHTML = '';\n}\n\nfunction showWeatherData(data) {\n  showCurrentData(data);\n  showForecastDayData(data);\n  showForecastNextData(data);\n\n  const buttonLocation = document.querySelector('.current-weather__location');\n\n  buttonLocation.addEventListener('click', async () => {\n    try {\n      await getGeoLocation();\n    }\n    catch (error) {\n      console.error('Ошибка при получении геолокации:', error);\n    }\n  });\n\n  loadingBlocks.forEach((item) => {\n    item.classList.remove('loading');\n  })\n}\n\nfunction showCurrentData(data) {\n  const weatherContainer = document.querySelector('.current-weather__content');\n  const address = `${data.address.road}, ${data.address.city || data.address.town}, ${data.address.country}`;\n  const time = new Date().toLocaleTimeString([], {hour: '2-digit', minute: '2-digit', hour12: false});\n  const currentWeather = data.weather.current;\n  const degrees = currentWeather.wind_direction.toFixed(0);\n  const windDirection = degreesToWindDirection(degrees);\n  const prefix = 'current-weather';\n\n  weatherContainer.innerHTML = `\n    <button class=\"current-weather__location\" type=\"button\">\n      <svg class=\"current-weather__location-icon\" viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\">\n          <use xlink:href=\"/public/img/sprite.svg#icon-compass\"/>\n      </svg>\n      <p class=\"current-weather__location-address\">${address}</p>\n    </button>\n    <p class=\"current-weather__time\">${nowTitle} ${time}</p>\n      <svg class=\"current-weather__icon\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n        <use xlink:href=\"/public/img/sprite.svg#${currentWeather.icon}\"/>\n      </svg>\n    <div class=\"current-weather__detail\">\n      ${createWeatherDetail(currentWeather.air_temperature, 'temperature', prefix, `${temperatureUnit}`)}\n      ${createWeatherDetail(currentWeather.wind_speed, 'wind-speed', prefix, `${windSpeedUnit}`)}\n      ${createWeatherDetail(windDirection, 'wind-direction', prefix, '', '' + (parseFloat(degrees) + 180))}\n      ${createWeatherDetail(currentWeather.humidity, 'humidity', prefix, `${humidityUnit}`)}\n      ${createWeatherDetail(currentWeather.air_pressure, 'pressure', prefix, `${pressureUnit}`)}\n    </div>`;\n}\n\nfunction showForecastDayData(data) {\n  const weatherContainer = document.querySelector('.day-forecast__list');\n\n  data.weather.day.forEach(item => {\n    weatherContainer.appendChild(createForecastElement(item, 'day-forecast'));\n  });\n}\n\nfunction showForecastNextData(data) {\n  const weatherContainer = document.querySelector('.next-forecast__list');\n\n  data.weather.next.forEach(item => {\n    weatherContainer.appendChild(createForecastElement(item, 'next-forecast'));\n  });\n}\n\nfunction createWeatherDetail(value, type, prefix, units, degrees = '') {\n  const iconPath = prefix !== 'current-weather' ? `${type}-static` : type;\n\n  return `\n    <div class=\"${prefix}__detail-item\">\n      <svg class=\"${prefix}__detail-icon\" ${degrees ? `style=\"transform:rotate(${degrees}deg)\"` : ''} viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n        <use xlink:href=\"/public/img/sprite.svg#${iconPath}\"/>\n      </svg>\n      <span class=\"${prefix}__detail-value\">${value}</span>\n      ${units ? `<span class=\"${prefix}__detail-units\">${units}</span>` : ''}\n    </div>`;\n}\n\nfunction createForecastElement(item, prefix) {\n  const degrees = item.wind_direction.toFixed(0);\n  const windDirection = degreesToWindDirection(degrees);\n\n  const element = document.createElement('li');\n  element.classList.add(`${prefix}__item`, 'swiper-slide');\n  element.innerHTML = `\n    <p class=\"${prefix}${item.time ? '__time' : '__date'}\">${item.time || item.date}</p>\n    <svg class=\"${prefix}__icon\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n      <use xlink:href=\"/public/img/sprite.svg#${item.icon}\"/>\n    </svg>\n    <div class=\"${prefix}__detail\">\n      ${\n    typeof item.air_temperature === 'object' && item.air_temperature !== null\n      ? createTimeSpecificDetails(item.air_temperature, 'temperature', prefix, `${temperatureUnit}`)\n      : createWeatherDetail(item.air_temperature, 'temperature', prefix, `${temperatureUnit}`)\n  }\n      ${createWeatherDetail(item.wind_speed, 'wind-speed', prefix, `${windSpeedUnit}`)}\n      ${createWeatherDetail(windDirection, 'wind-direction', prefix, '', '' + (parseFloat(degrees) + 180))}\n      ${createWeatherDetail(item.humidity, 'humidity', prefix, `${humidityUnit}`)}\n      ${createWeatherDetail(item.air_pressure, 'pressure', prefix, `${pressureUnit}`)}\n    </div>`;\n\n  return element;\n}\n\nfunction createTimeSpecificDetails(temperatures, type, prefix, units) {\n  const timeOrder = ['06', '12', '18'];\n  const timeLabels = {\n    '06': `${morningLabel}`,\n    '12': `${afternoonLabel}`,\n    '18': `${eveningLabel}`\n  };\n\n  return timeOrder.map(time => {\n    const label = timeLabels[time];\n    const value = temperatures[time] !== undefined ? temperatures[time] : 'N/A';\n    return `\n      <div class=\"${prefix}__detail-item\">\n        <span class=\"${prefix}__detail-time\">${label}</span>\n        <span class=\"${prefix}__detail-value\">${value}</span>\n        ${units ? `<span class=\"${prefix}__detail-units\">${units}</span>` : ''}\n      </div>`;\n  }).join('');\n}\n\nfunction degreesToWindDirection(degrees) {\n  const index = Math.round(degrees / 45) % 8;\n\n  return windDirections[index];\n}\n"]}